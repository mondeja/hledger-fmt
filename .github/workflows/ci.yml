name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
  workflow_dispatch:

jobs:
  qa:
    name: QA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
          profile: minimal
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          ls -la
          ls -la ..
          pip install --upgrade pip
          pip install pre-commit
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Lint
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 25
          max_attempts: 3
          retry_wait_seconds: 15
          warning_on_retry: false
          command: pre-commit run --all-files --show-diff-on-failure

  build:
    name: Build hledger-fmt
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-latest
          - macos-14 # ARM
          - macos-13 # X86
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: nightly
          components: rust-src
      - name: Install UPX
        if: matrix.runs-on == 'windows-latest'
        run: choco install upx
      - name: Install UPX
        if: matrix.runs-on == 'ubuntu-latest'
        run: sudo apt-get install upx
      - name: Install UPX
        if: matrix.runs-on == 'macos-14' || matrix.runs-on == 'macos-13'
        run: brew install upx
      - name: Get Rust target
        id: get-rust-target
        shell: bash
        run: |
          echo "target=$(rustc -vV | sed -n 's|host: ||p')" >> $GITHUB_OUTPUT
      - name: Build
        shell: bash
        run: |
          RUSTFLAGS="-Zlocation-detail=none -Cpanic=abort" \
            cargo +nightly build \
              -Z build-std=std,panic_abort \
              -Z build-std-features=optimize_for_size,panic_immediate_abort \
              --target ${{ steps.get-rust-target.outputs.target }} \
              --release
      - name: Standarize Windows executable path
        if: matrix.runs-on == 'windows-latest'
        shell: bash
        run: |
          mv \
            target/${{ steps.get-rust-target.outputs.target }}/release/hledger-fmt.exe \
            target/${{ steps.get-rust-target.outputs.target }}/release/hledger-fmt
      - name: Compress with UPX
        if: ${{ !startsWith(matrix.runs-on, 'macos') }}
        run: |
          upx --best --lzma \
            target/${{ steps.get-rust-target.outputs.target }}/release/hledger-fmt
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runs-on }}-build
          path: ./target/${{ steps.get-rust-target.outputs.target }}/release/hledger-fmt
          if-no-files-found: error
          overwrite: true

  dist:
    name: Create distribution packages
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create directories
        run: mkdir -p dist build/mac build/linux build/windows
      - name: Download MacOS ARM artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-14-build
          path: ./build/mac-arm64
      - name: Download MacOS X86 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-13-build
          path: ./build/mac-x64
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-build
          path: ./build/linux
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-build
          path: ./build/windows
      - name: Create Linux tarball
        run: tar -czf dist/hledger-fmt-linux-x64.tar.gz -C build/linux hledger-fmt
      - name: Create MacOS tarballs
        run: |
          tar -czf dist/hledger-fmt-mac-x64.tar.gz -C build/mac-x64 hledger-fmt
          tar -czf dist/hledger-fmt-mac-arm64.tar.gz -C build/mac-arm64 hledger-fmt
      - name: Create Windows zip
        run: |
          cd build/windows
          mv hledger-fmt hledger-fmt.exe
          7z a -tzip ../../dist/hledger-fmt-windows-x64.zip hledger-fmt.exe
      - name: Remove build directories
        run: rm -rf build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist

  unit-tests:
    name: Unit tests
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
          profile: minimal
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-unit-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Run unit tests
        run: cargo test

  test-release:
    needs:
      - qa
      - unit-tests
      - dist
    if: |
      '${{ github.event.pull_request.user.login }}' == 'mondeja' ||
      startsWith(github.ref, 'refs/tags/') ||
      github.ref == 'refs/heads/master'
    name: Test release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
          profile: minimal
      - name: Publish
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v --dry-run

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Release heldger-fmt
    needs: test-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v2
        with:
          rust-version: stable
          profile: minimal
      - name: Publish
        run: |
          cargo login ${{ secrets.CRATES_TOKEN }}
          cargo publish -v

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Create release
    needs: release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get tag metadata
        id: tag
        run: |
          TAG_TITLE=${GITHUB_REF#refs/*/}
          echo "title=$TAG_TITLE" >> $GITHUB_OUTPUT
      - name: Download distribution
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ steps.tag.outputs.title }}
          tag_name: ${{ steps.tag.outputs.title }}
          body: |
            See [CHANGELOG](https://github.com/mondeja/hledger-fmt/blob/master/CHANGELOG.md).
          draft: false
          prerelease: false
          files: |
            ./dist/hledger-fmt-linux-x64.tar.gz
            ./dist/hledger-fmt-mac-x64.tar.gz
            ./dist/hledger-fmt-mac-arm64.tar.gz
            ./dist/hledger-fmt-windows-x64.zip
